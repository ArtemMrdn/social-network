{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","key","id","message","ref","React","memo","console","log","src","photo","width","alt","userName","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"6KAkBMA,EAAiB,WACrB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAEV,CAACR,IAGF,6BACc,UAAXE,GACC,4EAEF,oCACE,kBAACO,EAAD,MACA,kBAACC,EAAD,SAMFD,EAAyB,WAC7B,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MAFd,EAGKC,oBAAS,GAHd,mBAG5BC,EAH4B,KAGdC,EAHc,KAwBnC,OANAV,qBAAU,WACW,IAAD,EAAdS,IACF,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAACJ,EAAcJ,IAGhB,yBACES,MAAO,CAAEC,OAAQ,QAASC,UAAW,QACrCC,SAtBkB,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cAEhBC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,KAEHhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,KAe/BL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OACZ,kBAACC,EAAD,CAASC,IAAKH,EAAEI,GAAIC,QAASL,OAE/B,yBAAKM,IAAK3B,MAKVuB,EAAqDK,IAAMC,MAC/D,YAAkB,IAAfH,EAAc,EAAdA,QAED,OADAI,QAAQC,IAAI,iBAEV,6BACE,yBAAKC,IAAKN,EAAQO,MAAOzB,MAAO,CAAE0B,MAAO,QAAUC,IAAI,iBAAkB,IACzE,2BAAIT,EAAQU,UACZ,6BACCV,EAAQA,QACT,iCAMF5B,EAA+B,WAAO,IAAD,EACXI,mBAAS,IADE,mBAClCwB,EADkC,KACzBW,EADyB,KAEnCjD,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OACE,6BACE,6BACE,8BACEgD,SAAU,SAAC1B,GAAD,OAAOyB,EAAWzB,EAAEE,cAAcyB,QAC5CA,MAAOb,KAGX,6BACE,4BAAQc,SAAqB,UAAXlD,EAAoBmD,QAjBjB,WACpBf,IAGLtC,EAASsD,YAAYhB,IACrBW,EAAW,OAYP,WAQOM,UApHY,WACzB,OACE,6BACE,kBAACxD,EAAD","file":"static/js/5.0b599084.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from \"../../redux/chat-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      {status === \"error\" && (\r\n        <div>Some error occured. Please refresh the page</div>\r\n      )}\r\n      <>\r\n        <Messages />\r\n        <AddMessageForm />\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC<{}> = () => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (\r\n      Math.abs(\r\n        element.scrollHeight - element.scrollTop - element.clientHeight\r\n      ) < 300\r\n    ) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [isAutoScroll, messages]);\r\n\r\n  return (\r\n    <div\r\n      style={{ height: \"400px\", overflowY: \"auto\" }}\r\n      onScroll={scrollHandler}\r\n    >\r\n      {messages.map((m, index) => (\r\n        <Message key={m.id} message={m} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\r\n  ({ message }) => {\r\n    console.log(\">>>>>>Message\");\r\n    return (\r\n      <div>\r\n        <img src={message.photo} style={{ width: \"30px\" }} alt='photoMessage' />{\" \"}\r\n        <b>{message.userName}</b>\r\n        <br />\r\n        {message.message}\r\n        <hr />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessage(message));\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          value={message}\r\n        ></textarea>\r\n      </div>\r\n      <div>\r\n        <button disabled={status !== \"ready\"} onClick={sendMessageHandler}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}