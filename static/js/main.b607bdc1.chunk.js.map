{"version":3,"sources":["utils/validators/validators.ts","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.jpg","api/chat-api.ts","redux/chat-reducer.ts","assets/images/preloader.svg","components/Users/Users.module.css","api/api.ts","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","style","backgroundColor","src","preloader","alt","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodesEnum","ResultCodeForCapcthaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","createField","Input","undefined","className","formSummaryError","LoginPage","useSelector","useDispatch","to","CaptchaIsRequired","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","selectedPage","pageNumber","key","User","user","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","validate","setSubmitting","onFilterChanged","isSubmitting","as","Users","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","UsersPage","pageTitle","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.b607bdc1.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\ntype PropsType = {};\r\n\r\nlet Preloader: React.FC = () => {\r\n  return (\r\n    <div style={{ backgroundColor: \"white\" }}>\r\n      <img src={preloader} alt='preloader' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__9CS2_\",\"pageNumber\":\"Paginator_pageNumber__331zN\",\"selectedPage\":\"Paginator_selectedPage__3jgbh\"};","import {PhotosType, ProfileType} from '../types/types';\r\nimport {instance, APIResponseType} from './api';\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n}\r\n","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { PhotosType, PostType, ProfileType } from \"../types/types\";\r\nimport { profileAPI } from \"../api/profile-api\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: \"Hi, how are you?\", likesCount: 10 },\r\n    { id: 2, message: \"It's my first post\", likesCount: 12 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: \"\",\r\n};\r\n\r\nconst profileReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/PROFILE/ADD-POST\": {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      };\r\n    }\r\n    case \"SN/PROFILE/SET_STATUS\": {\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    }\r\n    case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n      return { ...state, profile: action.profile };\r\n    }\r\n\r\n    case \"SN/PROFILE/DELETE_POST\":\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId),\r\n      };\r\n\r\n    case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string) =>\r\n    ({ type: \"SN/PROFILE/ADD-POST\", newPostText } as const),\r\n  setUserProfile: (profile: ProfileType) =>\r\n    ({ type: \"SN/PROFILE/SET_USER_PROFILE\", profile } as const),\r\n  setStatus: (status: string) =>\r\n    ({ type: \"SN/PROFILE/SET_STATUS\", status } as const),\r\n  deletePost: (postId: number) =>\r\n    ({ type: \"SN/PROFILE/DELETE_POST\", postId } as const),\r\n  savePhotoSuccess: (photos: PhotosType) =>\r\n    ({ type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\", photos } as const),\r\n};\r\n\r\nexport const getUserProfile =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n  };\r\n\r\nexport const getStatus =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n  };\r\n\r\nexport const updateStatus =\r\n  (status: string): ThunkType =>\r\n  async (dispatch) => {\r\n    try {\r\n      let data = await profileAPI.updateStatus(status);\r\n\r\n      if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n      }\r\n    } catch (error) {\r\n      //\r\n    }\r\n  };\r\n\r\nexport const savePhoto =\r\n  (file: File): ThunkType =>\r\n  async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n\r\n    if (data.resultCode === 0) {\r\n      dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n  };\r\n\r\nexport const saveProfile =\r\n  (profile: ProfileType): ThunkType =>\r\n  async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n\r\n    if (data.resultCode === 0) {\r\n      if (userId != null) {\r\n        dispatch(getUserProfile(userId));\r\n      } else {\r\n        throw new Error(\"userId can't be null\");\r\n      }\r\n    } else {\r\n      dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }));\r\n      return Promise.reject(data.messages[0]);\r\n    }\r\n  };\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\r\n","import { InferActionsTypes } from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n  id: number;\r\n  name: string;\r\n};\r\ntype MessageType = {\r\n  id: number;\r\n  message: string;\r\n};\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: \"Artem\" },\r\n    { id: 2, name: \"Daniel\" },\r\n    { id: 3, name: \"Valera\" },\r\n    { id: 4, name: \"Sanek\" },\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, message: \"Hi\" },\r\n    { id: 2, message: \"Hi, hru?\" },\r\n    { id: 3, message: \"Hi everyone\" },\r\n  ] as Array<MessageType>,\r\n};\r\n\r\nconst dialogsReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/DIALOGS/SEND_MESSAGE\":\r\n      let body = action.newMessageBody;\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 6, message: body }],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessageBody: string) =>\r\n    ({ type: \"SN/DIALOGS/SEND_MESSAGE\", newMessageBody } as const),\r\n};\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","module.exports = __webpack_public_path__ + \"static/media/user.9971c45e.jpg\";","const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n","import { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { FormAction } from \"redux-form/lib/actions\";\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from \"../api/chat-api\";\r\nimport { v1 } from \"uuid\";\r\n\r\ntype ChatMessageType = ChatMessageAPIType & { id: string };\r\n\r\nlet initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: \"pending\" as StatusType,\r\n};\r\n\r\nconst chatReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/chat/MESSAGES_RECEVIED\":\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          ...action.payload.messages.map((m) => ({ ...m, id: v1() })),\r\n        ].filter((m, index, array) => index >= array.length - 100),\r\n      };\r\n    case \"SN/chat/STATUS_CHANGED\":\r\n      return {\r\n        ...state,\r\n        status: action.payload.status,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  messagesReceived: (messages: ChatMessageAPIType[]) =>\r\n    ({\r\n      type: \"SN/chat/MESSAGES_RECEVIED\",\r\n      payload: { messages },\r\n    } as const),\r\n  statusChanged: (status: StatusType) =>\r\n    ({\r\n      type: \"SN/chat/STATUS_CHANGED\",\r\n      payload: { status },\r\n    } as const),\r\n};\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null =\r\n  null;\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_newMessageHandler === null) {\r\n    _newMessageHandler = (messages) => {\r\n      dispatch(actions.messagesReceived(messages));\r\n    };\r\n  }\r\n  return _newMessageHandler;\r\n};\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(actions.statusChanged(status));\r\n    };\r\n  }\r\n  return _statusChangedHandler;\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.start();\r\n  chatAPI.subscribe(\"messages-received\", newMessageHandlerCreator(dispatch));\r\n  chatAPI.subscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n};\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.unsubscribe(\"messages-received\", newMessageHandlerCreator(dispatch));\r\n  chatAPI.unsubscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n  chatAPI.stop();\r\n};\r\n\r\nexport const sendMessage =\r\n  (message: string): ThunkType =>\r\n  async (dispatch) => {\r\n    chatAPI.sendMessage(message);\r\n  };\r\n\r\nexport default chatReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\r\n","module.exports = __webpack_public_path__ + \"static/media/preloader.6e7c9db7.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1xp89\"};","import axios from \"axios\";\r\nimport { UserType } from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n  headers: {\r\n    \"API-KEY\": \"5539b75d-6a47-4854-b456-74a460fbede6\",\r\n  },\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCapcthaEnum {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: Array<UserType>;\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n  data: D;\r\n  messages: Array<string>;\r\n  resultCode: RC;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {instance, APIResponseType, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n","import {instance} from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n}\r\n","import { ResultCodeForCapcthaEnum, ResultCodesEnum } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { authAPI } from \"../api/auth-api\";\r\nimport { securityAPI } from \"../api/security-api\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport { FormAction } from \"redux-form/lib/actions\";\r\n\r\nlet initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null, // if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"SN/auth/SET_USER_DATA\":\r\n    case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setAuthUserData: (\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n  ) =>\r\n    ({\r\n      type: \"SN/auth/SET_USER_DATA\",\r\n      payload: { userId, email, login, isAuth },\r\n    } as const),\r\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\r\n    ({\r\n      type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n      payload: { captchaUrl },\r\n    } as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  let meData = await authAPI.me();\r\n  if (meData.resultCode === ResultCodesEnum.Success) {\r\n    let { id, login, email } = meData.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true));\r\n  }\r\n};\r\n\r\nexport const login =\r\n  (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n  ): ThunkType =>\r\n  async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n      // success, get auth data\r\n      dispatch(getAuthUserData());\r\n    } else {\r\n      if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\r\n        dispatch(getCaptchaUrl());\r\n      }\r\n\r\n      let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n      dispatch(stopSubmit(\"login\", { _error: message }));\r\n    }\r\n  };\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  const captchaUrl = data.url;\r\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n  let response = await authAPI.logout();\r\n\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\r\n","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n} from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null;\r\n};\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        \"Email\",\r\n        \"email\",\r\n        [required],\r\n        Input\r\n      )}\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        \"Password\",\r\n        \"password\",\r\n        [required],\r\n        Input,\r\n        { type: \"password\" }\r\n      )}\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        undefined,\r\n        \"rememberMe\",\r\n        [],\r\n        Input,\r\n        { type: \"checkbox\" },\r\n        \"remember me\"\r\n      )}\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt='captcha' />}\r\n      {captchaUrl &&\r\n        createField<LoginFormValuesTypeKeys>(\r\n          \"Symbols from image\",\r\n          \"captcha\",\r\n          [required],\r\n          Input,\r\n          {}\r\n        )}\r\n\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n  form: \"login\",\r\n})(LoginForm);\r\n\r\nexport type LoginFormValuesType = {\r\n  captcha: string;\r\n  rememberMe: boolean;\r\n  password: string;\r\n  email: string;\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const captchaUrl = useSelector(\r\n    (state: AppStateType) => state.auth.captchaUrl\r\n  );\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    dispatch(\r\n      login(\r\n        formData.email,\r\n        formData.password,\r\n        formData.rememberMe,\r\n        formData.captcha\r\n      )\r\n    );\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\n","import {getAuthUserData} from \"./auth-reducer\"\r\nimport {InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;\r\n","let initialState = {}\r\ntype InitialStateType = typeof initialState\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;\r\n","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import { GetItemsType, instance, APIResponseType } from \"./api\";\r\n\r\nexport const usersAPI = {\r\n  getUsers(\r\n    currentPage = 1,\r\n    pageSize = 10,\r\n    term: string = \"\",\r\n    friend: null | boolean = null\r\n  ) {\r\n    return instance\r\n      .get<GetItemsType>(\r\n        `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n          (friend === null ? \"\" : `&friend=${friend}`)\r\n      )\r\n      .then((res) => res.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instance\r\n      .post<APIResponseType>(`follow/${userId}`)\r\n      .then((res) => res.data);\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance\r\n      .delete(`follow/${userId}`)\r\n      .then((res) => res.data) as Promise<APIResponseType>;\r\n  },\r\n};\r\n","import { updateObjectInArray } from \"../utils/object-helpers\";\r\nimport { UserType } from \"../types/types\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { usersAPI } from \"../api/users-api\";\r\nimport { APIResponseType } from \"../api/api\";\r\n\r\nlet initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [] as Array<number>, //array of users ids,\r\n  filter: {\r\n    term: \"\",\r\n    friend: null as null | boolean,\r\n  },\r\n};\r\n\r\nconst usersReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialState => {\r\n  switch (action.type) {\r\n    case \"SN/USERS/FOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: true,\r\n        }),\r\n      };\r\n    case \"SN/USERS/UNFOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: false,\r\n        }),\r\n      };\r\n    case \"SN/USERS/SET_USERS\": {\r\n      return { ...state, users: action.users };\r\n    }\r\n    case \"SN/USERS/SET_CURRENT_PAGE\": {\r\n      return { ...state, currentPage: action.currentPage };\r\n    }\r\n    case \"SN/USERS/SET_TOTAL_USERS_COUNT\": {\r\n      return { ...state, totalUsersCount: action.count };\r\n    }\r\n    case \"SN/USERS/TOGGLE_IS_FETCHING\": {\r\n      return { ...state, isFetching: action.isFetching };\r\n    }\r\n    case \"SN/USERS/SET_FILTER\": {\r\n      return { ...state, filter: action.payload };\r\n    }\r\n    case \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) =>\r\n    ({ type: \"SN/USERS/FOLLOW\", userId } as const),\r\n  unfollowSuccess: (userId: number) =>\r\n    ({ type: \"SN/USERS/UNFOLLOW\", userId } as const),\r\n  setUsers: (users: Array<UserType>) =>\r\n    ({ type: \"SN/USERS/SET_USERS\", users } as const),\r\n  setCurrentPage: (currentPage: number) =>\r\n    ({ type: \"SN/USERS/SET_CURRENT_PAGE\", currentPage } as const),\r\n  setFilter: (filter: FilterType) =>\r\n    ({ type: \"SN/USERS/SET_FILTER\", payload: filter } as const),\r\n  setTotalUsersCount: (totalUsersCount: number) =>\r\n    ({\r\n      type: \"SN/USERS/SET_TOTAL_USERS_COUNT\",\r\n      count: totalUsersCount,\r\n    } as const),\r\n  toggleIsFetching: (isFetching: boolean) =>\r\n    ({\r\n      type: \"SN/USERS/TOGGLE_IS_FETCHING\",\r\n      isFetching,\r\n    } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number) =>\r\n    ({\r\n      type: \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n      isFetching,\r\n      userId,\r\n    } as const),\r\n};\r\n\r\nexport const requestUsers = (\r\n  page: number,\r\n  pageSize: number,\r\n  filter: FilterType\r\n): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n\r\n    let data = await usersAPI.getUsers(\r\n      page,\r\n      pageSize,\r\n      filter.term,\r\n      filter.friend\r\n    );\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUsersCount(data.totalCount));\r\n  };\r\n};\r\n\r\nconst _followUnfollowFlow = async (\r\n  dispatch: Dispatch<ActionsTypes>,\r\n  userId: number,\r\n  apiMethod: (userId: number) => Promise<APIResponseType>,\r\n  actionCreator: (userId: number) => ActionsTypes\r\n) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  let response = await apiMethod(userId);\r\n\r\n  if (response.resultCode === 0) {\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    await _followUnfollowFlow(\r\n      dispatch,\r\n      userId,\r\n      usersAPI.follow.bind(usersAPI),\r\n      actions.followSuccess\r\n    );\r\n  };\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    await _followUnfollowFlow(\r\n      dispatch,\r\n      userId,\r\n      usersAPI.unfollow.bind(usersAPI),\r\n      actions.unfollowSuccess\r\n    );\r\n  };\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n","import {\r\n  Action,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  compose,\r\n  createStore,\r\n} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsTypes<T> = T extends {\r\n  [keys: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\n\r\nexport type BaseThunkType<\r\n  A extends Action = Action,\r\n  R = Promise<void>\r\n> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React from \"react\"\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import {createSelector} from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}\r\n","import React, {useState} from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\r\n                                      currentPage = 1,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n","import React from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.jpg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n  user: UserType;\r\n  followingInProgress: Array<number>;\r\n  unfollow: (userId: number) => void;\r\n  follow: (userId: number) => void;\r\n};\r\n\r\nconst User: React.FC<PropsType> = ({\r\n  user,\r\n  followingInProgress,\r\n  unfollow,\r\n  follow,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <span>\r\n        <div>\r\n          <NavLink to={\"/profile/\" + user.id}>\r\n            <img\r\n              src={user.photos.small != null ? user.photos.small : userPhoto}\r\n              className={styles.userPhoto}\r\n              alt='userPhoto'\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}\r\n            >\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}\r\n            >\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span>\r\n        <span>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n          <div>{\"user.location.country\"}</div>\r\n          <div>{\"user.location.city\"}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import {Field, Form, Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getUsersFilter} from '../../redux/users-selectors'\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})\r\n","import React, { FC, useEffect } from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport { UsersSearchForm } from \"./UsersSearchForm\";\r\nimport { FilterType, requestUsers } from \"../../redux/users-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers,\r\n  getUsersFilter,\r\n} from \"../../redux/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype PropsType = {};\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\nexport const Users: FC<PropsType> = (props) => {\r\n  const users = useSelector(getUsers);\r\n  const totalUsersCount = useSelector(getTotalUsersCount);\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const pageSize = useSelector(getPageSize);\r\n  const filter = useSelector(getUsersFilter);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(\r\n      history.location.search.substr(1)\r\n    ) as QueryParamsType;\r\n\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n\r\n    if (!!parsed.page) actualPage = Number(parsed.page);\r\n\r\n    if (!!parsed.term)\r\n      actualFilter = { ...actualFilter, term: parsed.term as string };\r\n\r\n    switch (parsed.friend) {\r\n      case \"null\":\r\n        actualFilter = { ...actualFilter, friend: null };\r\n        break;\r\n      case \"true\":\r\n        actualFilter = { ...actualFilter, friend: true };\r\n        break;\r\n      case \"false\":\r\n        actualFilter = { ...actualFilter, friend: false };\r\n        break;\r\n    }\r\n\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {};\r\n\r\n    if (!!filter.term) query.term = filter.term;\r\n    if (filter.friend !== null) query.friend = String(filter.friend);\r\n    if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n    history.push({\r\n      pathname: \"/developers\",\r\n      search: queryString.stringify(query),\r\n    });\r\n  }, [filter, currentPage]);\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter));\r\n  };\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter));\r\n  };\r\n  const follow = (userId: number) => {\r\n    dispatch(follow(userId));\r\n  };\r\n  const unfollow = (userId: number) => {\r\n    dispatch(unfollow(userId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n\r\n      <Paginator\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n      <div>\r\n        {users.map((u) => (\r\n          <User\r\n            user={u}\r\n            followingInProgress={followingInProgress}\r\n            key={u.id}\r\n            unfollow={unfollow}\r\n            follow={follow}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { getIsFetching } from \"../../redux/users-selectors\";\r\nimport { Users } from \"./Users\";\r\n\r\ntype UsersPagePropsType = {\r\n  pageTitle: string;\r\n};\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  return (\r\n    <>\r\n      <h2>{props.pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\n","import {AppStateType} from './redux-store'\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd'\r\nimport {UserOutlined} from '@ant-design/icons'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\r\nimport {logout} from '../../redux/auth-reducer'\r\n\r\nexport type MapPropsType = {}\r\n\r\nexport const Header: React.FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout\r\n\r\n    return <Header className=\"header\">\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n\r\n            {isAuth\r\n                ?<> <Col span={1}>\r\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>Log out</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Link to={'/login'}>Login</Link>\r\n                    </Button>\r\n                </Col>}\r\n\r\n        </Row>\r\n\r\n\r\n    </Header>\r\n\r\n    /*  <header className={s.header}>\r\n          <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n\r\n          <div className={s.loginBlock}>\r\n              { props.isAuth\r\n                  ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                  : <NavLink to={'/login'}>Login</NavLink> }\r\n          </div>\r\n      </header>*/\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  BrowserRouter,\r\n  Link,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\nimport { LoginPage } from \"./components/Login/LoginPage\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { initializeApp } from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store, { AppStateType } from \"./redux/redux-store\";\r\nimport { withSuspense } from \"./hoc/withSuspense\";\r\nimport { UsersPage } from \"./components/Users/UsersContainer\";\r\n\r\nimport { Breadcrumb, Layout, Menu } from \"antd\";\r\nimport {\r\n  LaptopOutlined,\r\n  NotificationOutlined,\r\n  UserOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Header } from \"./components/Header/Header\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Content, Footer, Sider } = Layout;\r\n\r\nconst DialogsContainer = React.lazy(\r\n  () => import(\"./components/Dialogs/DialogsContainer\")\r\n);\r\nconst ProfileContainer = React.lazy(\r\n  () => import(\"./components/Profile/ProfileContainer\")\r\n);\r\nconst ChatPage = React.lazy(() => import(\"./pages/Chat/ChatPage\"));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\nconst SuspendedProfile = withSuspense(ProfileContainer);\r\nconst SuspendedChatPage = withSuspense(ChatPage);\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    alert(\"Some error occured\");\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\r\n      \"unhandledrejection\",\r\n      this.catchAllUnhandledErrors\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n\r\n    return (\r\n      <Layout>\r\n        <Header />\r\n        <Content style={{ padding: \"0 50px\" }}>\r\n          <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <Layout\r\n            className='site-layout-background'\r\n            style={{ padding: \"24px 0\" }}\r\n          >\r\n            <Sider className='site-layout-background' width={200}>\r\n              <Menu\r\n                mode='inline'\r\n                /*  defaultSelectedKeys={['7']}*/\r\n                /*  defaultOpenKeys={['sub1']}*/\r\n                style={{ height: \"100%\" }}\r\n              >\r\n                <SubMenu key='sub1' icon={<UserOutlined />} title='My Profile'>\r\n                  <Menu.Item key='1'>\r\n                    {\" \"}\r\n                    <Link to='/profile'>Profile</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key='2'>\r\n                    {\" \"}\r\n                    <Link to='/dialogs'>Messages</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu\r\n                  key='sub2'\r\n                  icon={<LaptopOutlined />}\r\n                  title='Developers'\r\n                >\r\n                  <Menu.Item key='5'>\r\n                    <Link to='/developers'>Developers</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu\r\n                  key='sub3'\r\n                  icon={<NotificationOutlined />}\r\n                  title='subnav 3'\r\n                >\r\n                  <Menu.Item key='9'>\r\n                    <Link to='/chat'>Chat</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              </Menu>\r\n            </Sider>\r\n            <Content style={{ padding: \"0 24px\", minHeight: 280 }}>\r\n              <Switch>\r\n                <Route\r\n                  exact\r\n                  path='/'\r\n                  render={() => <Redirect to={\"/profile\"} />}\r\n                />\r\n\r\n                <Route path='/dialogs' render={() => <SuspendedDialogs />} />\r\n\r\n                <Route\r\n                  path='/profile/:userId?'\r\n                  render={() => <SuspendedProfile />}\r\n                />\r\n\r\n                <Route\r\n                  path='/developers'\r\n                  render={() => <UsersPage pageTitle={\"Самураи\"} />}\r\n                />\r\n\r\n                <Route path='/login' render={() => <LoginPage />} />\r\n\r\n                <Route path='/chat' render={() => <SuspendedChatPage />} />\r\n\r\n                <Route path='*' render={() => <div>404 NOT FOUND</div>} />\r\n              </Switch>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          Social Network ©2023 Created by ArtemMrdn\r\n        </Footer>\r\n      </Layout>\r\n\r\n      /*      <div className='app-wrapper'>\r\n                      <HeaderContainer/>\r\n                      <Navbar/>\r\n                      <div className='app-wrapper-content'>\r\n                          <Switch>\r\n                              <Route exact path='/'\r\n                                     render={() => <Redirect to={\"/profile\"}/>}/>\r\n\r\n                              <Route path='/dialogs'\r\n                                     render={() => <SuspendedDialogs /> }/>\r\n\r\n                              <Route path='/profile/:userId?'\r\n                                     render={() => <SuspendedProfile /> }/>\r\n\r\n                              <Route path='/users'\r\n                                     render={() => <UsersPage pageTitle={\"Самураи\"}/>}/>\r\n\r\n                              <Route path='/login'\r\n                                     render={() => <LoginPage/>}/>\r\n\r\n                              <Route path='*'\r\n                                     render={() => <div>404 NOT FOUND</div>}/>\r\n                          </Switch>\r\n\r\n                      </div>\r\n                  </div>*/\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n});\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp })\r\n)(App);\r\n\r\nconst SamuraiJSApp: React.FC = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default SamuraiJSApp;\r\n","import * as serviceWorker from './serviceWorker';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\nimport { WrappedFieldMetaProps } from \"redux-form/lib/Field\";\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps;\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n  meta: { touched, error },\r\n  children,\r\n}) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  //const {input, meta, child, ...restProps} = props;\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  //const {input, meta, child, ...restProps} = props;\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  props = {},\r\n  text = \"\"\r\n) {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props}\r\n      />{\" \"}\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3M32H\",\"error\":\"FormsControls_error__2T4kI\",\"formSummaryError\":\"FormsControls_formSummaryError__3WdFp\"};"],"sourceRoot":""}